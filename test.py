Calc = type("Calc", (), {'__init__': lambda self, _input: setattr(self, '_input', _input), '__str__': lambda self: str(getattr(self, '_input')), 'check': lambda self: bool(__import__("re", globals(), locals(), ['match'], 0).match(r"^-?\d+\.?\d*([+\-/\*]|(\*\*|//))-?\d+\.?\d$", getattr(self, "_input"))), 'calc': lambda self: eval(getattr(self, "_input")) if getattr(self, "check")() else f"cannot calculate a request, such as: \"{getattr(self, '_input')}\"", 'get_values': lambda self, val: str(val).split("+") if "+" in str(val) else str(val).split("-") if "-" in str(val) else str(val).split("**") if "**" in str(val) else str(val).split("*") if "*" in str(val) else str(val).split("//") if "//" in str(val) else str(val).split("/") if "/" in str(val) else None, '__add__': lambda self, other: " + ".join([" + ".join(i) for i in tuple(zip(getattr(self, "get_values")(getattr(self, "_input")), getattr(self, "get_values")(other)))])+" = "+f"{getattr(self, 'calc')()+eval(str(other)) if getattr(self, "check")() else f"cannot calculate a request, such as: \"{other}\""}", 'print_result': lambda self: __import__("sys", globals(), locals(), ['stdout'], 0).stdout.write(f"{getattr(self, 'calc')()}")})
